<?php
	//copyright fred.trotter@gmail.com
	//Not Only Development, LLC 2012
	//Licensed under the same license as Sequelize
	//https://github.com/sdepold/sequelize/blob/master/LICENSE


	$table_layout = array(
		'layout_start' => '<table>',
		'layout_end' => '</table>',
		'line_start' => '<tr> <td>',
		'line_split' => '</td> <td>',
		'line_end' => '</td> </tr>'
		);

	$ul_layout = array(
		'layout_start' => '<ul>',
		'layout_end' => '</ul>',
		'line_start' => '<li>',
		'line_split' => '',
		'line_end' => '</li>'
		);

	$my_layout = $table_layout;

	$s = $my_layout['line_start'];
	$m = $my_layout['line_split'];
	$e = $my_layout['line_end'];

	$S = $my_layout['layout_start'];
	$E = $my_layout['layout_end'];
	


	$debug = false;

	$config = yaml_parse_file('config.yaml');
	$user = $config['user'];
	$password = $config['password'];
	$database = $config['database'];
	mysql_connect($config['host'],$user,$password);
	mysql_select_db($database);


	include('TwilioPHP/Capability.php');
//TwilioAccountSid
//TwilioAuthToken: 
 
$capability = new Services_Twilio_Capability($config['TwilioAccountSid'],$config['TwilioAuthToken']);
$capability->allowClientOutgoing('KnowingGrin');

$twilio_token = $capability->generateToken();

	$tables_sql = "SHOW TABLES";

	$result = mysql_query($tables_sql) or die("arrgh... my eye!!!");

	$tables = array();
	while($row = mysql_fetch_array($result)){
		
		$this_table = $row[0];
		echo "found $this_table \n";
		$tables[] = $this_table;	
	}

	$orm_index_js = "

var ModelCache = {};


//Javascript does not allow for default arguments into functions
//this handles the problem for functions
//with unpredicatable arguments
function has_default(arg, def) {
   return (typeof arg == 'undefined' ? def : arg);
}



function buildCache(ORM,select_name){

        var object_type;
        var select_html;
        var selected_col;
        var data_cache = [];
//add code for auto-complete detection engine...

        object_type = ORM.name;
        //if we passed in a select_name, use it, otherwise use the default
        select_name = has_default(select_name, object_type + \"_id\");
        select_html = \"<select name='\" + select_name + \"'>\\n\";

        console.log(\"object_type: \" + object_type + \"\\n\");
        console.log(\"select_name: \" + select_name + \"\\n\");

        ORM.findAll().success(function(things) {

                __.each(things,function(a_thing){
                        //lets determine what the variable
                        //from the table should be the label for the
                        //select box...
                        if(selected_col === undefined){
                                selected = a_thing.attributes;
                                __.each(selected,function(key,value){
                                if(key.indexOf(\"name\") !== -1){
                                        //then this is my select variable..
                                                selected_col = key;
                //                              console.log(\"inside key\" + key);
                                        }
                                });
                        }

                        select_html = select_html               +
                                        \"<option value='\"       +
                                        a_thing.id              +
                                        \"'>\"                    +
                                a_thing[selected_col] + \"</option>\\n\";
                        my_value = a_thing[selected_col];

                        data_cache.push({
                                                id: a_thing.id,
                                                value: my_value
                                        });

                });
                select_html = select_html + \"</select>\\n\";
                //HTMLCache[select_name] = select_html;
                ModelCache[select_name] = data_cache;
        });
}

exports.buildCache = buildCache;


//Begin autogenerated Objects...
";

	$routes_js = "";
	$links_js = '';

	$other_tables = array(); //lets make sure we have references where we need them...
	
	$object_names = array();


	foreach($tables as $this_table){



		$fields_sql = "SELECT * 
FROM `INFORMATION_SCHEMA`.`COLUMNS` 
WHERE `TABLE_SCHEMA`='$database' 
    AND `TABLE_NAME`='$this_table';";

		$result = mysql_query($fields_sql) or die("doh!");
		
		//DB objects are plural...
		//lets fix that and get the singular version!!
		//$object_name = rtrim($this_table,'s');
		if(substr($this_table, -1, 1) == ',') {
  			$object_name = substr($this_table, 0, -1);
		}else{
			$object_name = $this_table;
		}

		$object_names[] = $object_name;

		$object_label = un_camelcase_string($object_name);

		//start headers...
		$JS_ORM = "//Generated by buildORM from the $database:$this_table
module.exports = function(sequelize, DataTypes) {
  return sequelize.define('$object_name', {
";

		$this_file_name = "$object_name.orm.js";
		$project_file = "orm/$this_file_name";

		$orm_index_js .= "\n//importing $object_name from table $database:$this_table\n"; 
		$orm_index_js .= "var $object_name = sequelize.import(__dirname + '/$this_file_name');\n";
		$orm_index_js .= "exports.$object_name = $object_name;\n";

		$dust_file = "views/$object_name.dust";
		$dust_extended_file = "views/$object_name.extended.dust";


		$dust_html = "

<fieldset><legend> $object_label </legend>

<form method='POST' action='/API/$object_name/'>
$S
";

	

		$c = '';
		while($row = mysql_fetch_array($result)){


			$foreign_key = false;
		
			//var_export($row);

			$col_name = $row['COLUMN_NAME'];

			$col_label = un_camelcase_string($col_name);

			$col_explode = explode('_',$col_name);
			if(count($col_explode) > 1){
				$end_col_name = array_pop($col_explode);
				$other_table = array_pop($col_explode);
				if(strcmp('id',strtolower($end_col_name)) == 0){
					//looks like an id..

					$foreign_key = true;
					$other_tables[$other_table] = $object_name; //make sure they are all there...
					
					$orm_index_js .= "// $col_name looks like an association\n";
					
					$links_js .= "
//$other_table"."s.hasOne(
$other_table"."s.hasMany(
		$object_name,
		{
//			as: 		'$col_name', 
			foreignKey: 	'$col_name'
		}
		);

buildCache($other_table"."s,'$col_name');

";


				if(strcmp('phone',strtolower($other_table)) == 0){
					//then we make special twilio pone magic...
					$phone_html = '<br> <div align="center">
    <input type="button" id="call" value="Start Call"/>
    <input type="button" id="hangup" value="Disconnect Call" style="display:none;"/>
    <div id="status">
        Offline
    </div>
</div>';	
				}else{
					$phone_html = '';
				}
					$dust_html .= 
"
$s $phone_html 
 $m <label for='$col_name'><a href='/API/$other_table"."s/'>  $col_label </a></label>  
$m
<select id='$col_name' name='$col_name'>
        <option value='0'> None </option>
{#$col_name.contents}
        <option value='{id}'> {value} </option>
{/$col_name.contents}
</select>
$e

 
";
//should include something like...
//{>'views/$other_table.select.dust'/}

				}//dealt with id

				
				if(strcmp('name',strtolower($end_col_name)) == 0){
					//then this is the magic name coolness..
					//this is not the level to deal with this...
				}
			}//dealt with all special column meta types..

			if($debug){
				echo "INFO: working on $database:$this_table:$col_name\n";
			}
			$fixed = false;

			if(strcmp('varchar',$row['DATA_TYPE']) == 0){

				$JS_ORM .= "$c    $col_name: { type: Sequelize.STRING }";
		
				$length = $row['CHARACTER_MAXIMUM_LENGTH'];	
					
				if($debug){	
				if($length != 255){
					echo "WARN: The length for varchar $database:$this_table:$col_name is not 255, but $length";
					if($length > 255){
						echo " Consider using a TEXT for this field\n";
					}else{
						echo " Consider increasing to 255\n";
					}
				}
				}//end debug

			
				$dust_html .= "
 $s $m<label for='$col_name'>  $col_label</label>
$m <textarea id='$col_name' name='$col_name'>{"."$col_name"."}</textarea>
$e
 
";

				$fixed = true;
			}//end STRING logic...

			if(strcmp('text',$row['DATA_TYPE']) == 0){
				$JS_ORM .= "$c    $col_name: { type: Sequelize.TEXT }";
				$fixed = true;
				$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m <textarea id='$col_name' name='$col_name'>{"."$col_name"."}</textarea>
$e
 
";
			}

			if(	strcmp('int',$row['DATA_TYPE']) == 0 ||
				strcmp('bigint',$row['DATA_TYPE']) == 0){
				$extra_stuff = '';
		
				if(strcmp('PRI',$row['COLUMN_KEY']) == 0){
					$extra_stuff .= ' ,primaryKey: true '; 
				}

				$JS_ORM .= "$c    $col_name: { type: Sequelize.INTEGER $extra_stuff}";
				$fixed = true;

				if(strcmp(strtolower($col_name),'id') == 0){
					$foreign_key = true; //well, not technically
								//but it keeps us from editing it directly...
					$dust_html .= "
<input type='hidden'  id='$col_name' name='$col_name' value='{".$col_name."}'>
";
			
				}

				if(!$foreign_key){ 
			//then this is an int that just wants to be a number

					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='number' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e</li> 
 
";


				}


			}

			if(strcmp('datetime',$row['DATA_TYPE']) == 0){
				$JS_ORM .= "$c    $col_name: { type: Sequelize.DATE }";
				$fixed = true;

					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='date' id='$col_name' name='$col_name' value='{".$col_name."}'> 
$e</li> 
 
";
			}

			if(strcmp('tinyint',$row['DATA_TYPE']) == 0){
				$JS_ORM .= "$c    $col_name: { type: Sequelize.BOOLEAN }";
				$fixed = true;
				if($debug){
				if(strcmp('tinyint(1)',$row['COLUMN_TYPE']) != 0){
					echo "WARN: The length for $database:$this_table:$col_name is other than 1... might want to change that... tinyints are always boolean in this world\n";
				}
				}


					$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='checkbox' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e</li> 

";

			}

			if(strcmp('float',$row['DATA_TYPE']) == 0){
				$JS_ORM .= "$c    $col_name: { type: Sequelize.FLOAT }";
				$fixed = true;
				$dust_html .= "
$s $m<label for='$col_name'>  $col_label</label>
$m<input type='number' step='1' id='$col_name' name='$col_name' value='{".$col_name."}'>
$e
";
			}

			if(!$fixed){
				$data_type = $row['DATA_TYPE'];
				echo "ERROR: for $database:$this_table:$col_name we cannot work with $data_type\n";
				$orm_index_js .= "//I did not understand what to do with $col_name\n";
			}

			$c = ",\n";
	
		}//done dealing with columns...

		$routes_js .= "

app.post('/API/$object_name/', ensureAuthenticated, function(req, res){
	//Save the object after getting the post from the form...
	res.send('$object_name saved <a href='/'>home</a>');
});

app.get('/API/$object_name/', ensureAuthenticated, function(req, res){
	//Create a new object here...

	var to_template = {};

	to_template.Type = '$object_name';

	console.log($object_name.rawAttributes);

	__.each($object_name.rawAttributes,function(this_value,this_key){
		if( typeof ModelCacheGLOBAL[this_key] != 'undefined'){
			//then this is a select box
			//or something...
			this_contents = ModelCacheGLOBAL[this_key];
			to_template[this_key] = {			
				is_array: true,
				contents: this_contents
			};
		}else{
			//nothing here... wait for any actual values...
		}
	});

        $object_name.findAll().success(function (instances) {

                to_template['instances'] = instances;

                console.log('Just made this bad boy');
                prettyJSON(to_template);
                res.render('html',to_template); //which loads views/$object_name.dust using Type


        });


});

app.get('/API/$object_name/:id/', ensureAuthenticated, function(req, res){
	//LOAD SEQUELIZE HERE using id!!
  	res.render('$object_name'); //which loads $dust_file
});


";

		//closeout JS object...
		//and add options so that Sequlize does not start guessing
		//table names...
		$JS_ORM .= "
  },
	{freezeTableName: true}
)
}
";
		//closeout the dust template
		$dust_html .= "
$s $m
<input type='submit' value='Save'>
$e
$E
</fieldset>
</form>

<pre>
{! @contextDump/ !}
</pre>
";

		//echo $JS_ORM;
		file_put_contents($project_file,$JS_ORM);
		file_put_contents($dust_file,$dust_html);
		//we do not want to overwrite the extended templates, but they need to exist...
		touch($dust_extended_file);

	}

	$routes_js .= "

//This what makes express into our webserver....
http.createServer(app).listen(app.get('port'), function(){
  console.log('Express server listening on port ' + app.get('port'));
});

";

	//seperate static routes file...	
	file_put_contents("not_routes.js",$routes_js);

	//orm file...
	$orm_index_js .= "\n\n //OK we have the objects.. Lets do the associations now.... ";
	$orm_file = "orm/index.js";
	$orm_index_js .= $links_js;

	$orm_index_js .= "

//Now that we have content... lets export the Caches we built...
exports.ModelCache = ModelCache;


";

	file_put_contents($orm_file,$orm_index_js);

	foreach($other_tables as $other_table => $from_table){

		$plural_table = $other_table . 's';

		if(	in_array($plural_table,$tables) ||
			in_array($other_table,$tables)){
			// well thats good, there is a reference to this table..
		}else{
			echo "ERROR: we have a foreign key (*_id) reference to table $other_table(s), from $from_table but no such table exists\n";
		}

	}


	$index_html = $ul_layout['layout_start'];
	foreach($object_names as $object_name){

		$index_html .= $ul_layout['line_start'] ." <a href='/API/$object_name/'>Manage $object_name</a>\n" .$ul_layout['line_end'];
	}

	$index_html .= $ul_layout['layout_end'];

	file_put_contents('views/list.dust',$index_html);

function un_camelcase_string($string){
	$string = preg_replace('/(?<=\\w)(?=[A-Z])/'," $1", $string);
	$string = trim($string);
	
	$string = preg_replace('/_id$/', '', $string);

return($string);


}

